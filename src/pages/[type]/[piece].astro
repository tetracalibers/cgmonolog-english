---
import AudioPlayer from "$/components/audio-player/AudioPlayer.svelte"
import HtmlDocument from "$/layout/HtmlDocument.astro"
import Header from "$/components/header/Header.astro"
import SpeakerProvider from "$/components/audio-player/SpeakerProvider.svelte"
import WithAnkiMode from "$/components/anki-mode/WithAnkiMode.svelte"
import SwitchAnkiMode from "$/components/anki-mode/SwitchAnkiMode.svelte"
import { pager } from "$/lib/slug"
import { getCollection, render } from "astro:content"
import { Icon } from "astro-icon/components"
import BackToTopLink from "$/components/link/BackToTopLink.astro"

export async function getStaticPaths() {
  const compare = (a: { data: { index: number } }, b: { data: { index: number } }) => a.data.index - b.data.index

  const mediumItems = (await getCollection("piece", ({ data }) => data.type === "medium")).sort(compare)
  const largeItems = (await getCollection("piece", ({ data }) => data.type === "large")).sort(compare)
  const smallItems = (await getCollection("piece", ({ data }) => data.type === "small")).sort(compare)
  const moreItems = (await getCollection("piece", ({ data }) => data.type === "more")).sort(compare)
  const singleItems = (await getCollection("piece", ({ data }) => data.type === "single")).sort(compare)

  const categories = [
    { type: "medium", entries: mediumItems },
    { type: "large", entries: largeItems },
    { type: "small", entries: smallItems },
    { type: "more", entries: moreItems },
    { type: "single", entries: singleItems }
  ]

  return categories.flatMap(({ entries, type }) => {
    return entries.map((entry, j) => {
      const { prev, next } = pager(entries, j)
      return {
        params: { type, piece: entry.id },
        props: {
          piece: entry,
          next: "/" + type + next,
          prev: "/" + type + prev,
          progress: Math.floor((j / (entries.length - 1)) * 100)
        }
      }
    })
  })
}

const { type } = Astro.params
const { piece, next, prev, progress } = Astro.props
const { Content } = await render(piece)
---

<HtmlDocument title={piece.data.shape}>
  <Header prev={prev} next={next} progress={progress} type={type}>
    <SwitchAnkiMode client:load />
  </Header>
  <div class="container">
    <div class="heading-container">
      <div class={`heading-icon --${type}`}>
        <Icon name="game-icons:jigsaw-piece" />
      </div>
      <h2 class="heading">
        {piece.data.shape}
      </h2>
      <div class="meaning anki-hidden-area">
        <WithAnkiMode client:load>{piece.data.meaning}</WithAnkiMode>
      </div>
    </div>
    <SpeakerProvider client:only="svelte">
      <div class="items-container">
        {
          piece.data.examples.map((example) => (
            <div class="item">
              <div class="item-lang">
                <div class="item-sentence">
                  {example.scene && <div class="item-scene">{example.scene}</div>}
                  <div class="item-main">
                    <div class="--en">{example.en}</div>
                    <div class="--ja anki-hidden-area">
                      <WithAnkiMode client:load>{example.ja}</WithAnkiMode>
                    </div>
                  </div>
                </div>
                <div class="item-player">
                  <AudioPlayer text={example.en} client:only="svelte" />
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </SpeakerProvider>
    <div class="content-wrapper">
      <Icon name="material-symbols-light:history-edu" />
      <Content />
    </div>
    <BackToTopLink />
  </div>
</HtmlDocument>

<style>
  .container {
    display: grid;
    gap: 3rem;
    padding-block: 3rem;
  }

  .heading-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.875rem;
    line-height: 2.25rem;
  }
  .heading-icon {
    display: flex;
    font-size: 1.2em;
  }
  .heading {
    font-weight: 400;
    font-size: inherit;
    margin: 0;
    text-align: center;
    text-wrap: balance;
  }
  .meaning {
    font-size: 0.875rem;
    line-height: 1.25rem;
    opacity: 0.9;
  }

  .content-wrapper {
    display: grid;
    place-items: center;
    gap: 1rem;
    padding: 1.5rem;
    margin-inline: 1.5rem;
    margin-block-start: 1.5rem;
    line-height: 2;
    border: 2px double var(--slate-400);
    position: relative;
    font-size: 0.9em;
  }
  .content-wrapper :global(svg) {
    position: absolute;
    left: -1.5rem;
    top: -1.5rem;
    font-size: 3rem;
    color: var(--slate-400);
  }
  .content-wrapper :global(:is(p, ul)) {
    margin: 0;
  }
  .content-wrapper :global(ul) {
    padding-inline-start: 1.25rem;
  }

  .items-container {
    display: grid;
    gap: 3rem;
  }
  .item {
    display: grid;
    gap: 1rem;
    padding-inline: 1.5rem;
  }
  .item-lang {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
  }
  .item-sentence {
    flex-basis: calc(64rem - 100%);
    flex-grow: 1;
  }
  .item-scene {
    font-size: 0.8rem;
    color: var(--slate-500);
  }
  .item-player {
    margin-inline-start: auto;
  }
  .item-main {
    display: grid;
    gap: 0.75rem;
  }
  .item-sentence {
    display: grid;
    gap: 1rem;
  }

  .player-wrapper {
    width: fit-content;
    justify-self: center;
  }

  .--en {
    font-size: 1.2em;
  }
  .--ja {
    font-weight: 300;
    font-size: 0.9em;
  }

  .anki-hidden-area :global([data-anki-mode="true"]) {
    background-color: #ff8dc7;
    color: #ff8dc7;
  }
</style>
